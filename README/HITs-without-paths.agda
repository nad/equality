------------------------------------------------------------------------
-- Code related to the paper "Higher Inductive Type Eliminators
-- Without Paths"
--
-- Nils Anders Danielsson
------------------------------------------------------------------------

-- Note that the code does not follow the paper exactly, and that some
-- of the code has been changed after the paper was published.

{-# OPTIONS --cubical --safe #-}

module README.HITs-without-paths where

import Equality
import Equality.Instances-related
import Equality.Path
import Equality.Path.Isomorphisms
import Equality.Propositional
import Function-universe
import H-level
import H-level.Truncation.Propositional
import Quotient
import Suspension

------------------------------------------------------------------------
-- 1: Introduction

-- The propositional truncation operator.

‚à•_‚à• = H-level.Truncation.Propositional.‚à•_‚à•

-- Equality defined as an inductive family with a single constructor
-- refl.

_‚â°_ = Equality.Propositional._‚â°_

------------------------------------------------------------------------
-- 2: An Axiomatisation of Equality With J

-- The code uses an axiomatisation of "equality with J", as discussed
-- in the text. The axiomatisation is a little convoluted in order to
-- support using equality at all universe levels. Furthermore, also as
-- discussed in the text, the axiomatisation supports choosing
-- specific definitions for other functions, like cong, to make the
-- code more usable when it is instantiated with Cubical Agda paths
-- (for which the canonical definition of cong computes in a different
-- way than typical definitions obtained using J).

-- Equality and reflexivity.

‚â°-refl = Equality.Reflexive-relation

-- The J rule and its computation rule.

J-J-refl = Equality.Equality-with-J‚ÇÄ

-- Extended variants of the two definitions above.

Equivalence-relation‚Å∫ = Equality.Equivalence-relation‚Å∫
Equality-with-J       = Equality.Equality-with-J
Equality-with-paths   = Equality.Path.Equality-with-paths

-- The extended variants are inhabited for all universe levels if the
-- basic ones are inhabited for all universe levels.

J‚ÇÄ‚áíEquivalence-relation‚Å∫             = Equality.J‚ÇÄ‚áíEquivalence-relation‚Å∫
J‚ÇÄ‚áíJ                                 = Equality.J‚ÇÄ‚áíJ
Equality-with-J‚ÇÄ‚áíEquality-with-paths =
  Equality.Path.Equality-with-J‚ÇÄ‚áíEquality-with-paths

-- To see how the code is axiomatised, see the module header of, say,
-- Circle.

import Circle

-- Any two notions of equality satisfying the axioms are pointwise
-- isomorphic, and the isomorphisms map canonical proofs of
-- reflexivity to canonical proofs of reflexivity.
--
-- Note that in some cases the code uses bijections (_‚Üî_) instead of
-- equivalences (_‚âÉ_).

instances-isomorphic =
  Equality.Instances-related.all-equality-types-isomorphic

-- Cubical Agda paths and a definition of equality as an inductive
-- family with a single constructor refl are instances of the axioms.
-- (The last instance is for Equality-with-J rather than
-- Equality-with-paths, because the latter definition is defined in
-- Cubical Agda, and the instance is not.)
--
-- The Cubical Agda identity type family has been removed from Cubical
-- Agda.

paths-instance            = Equality.Path.equality-with-paths
inductive-family-instance = Equality.Propositional.equality-with-J

------------------------------------------------------------------------
-- 3: Homogeneous Paths

-- The path type constructor.

Path = Equality.Path._‚â°_

-- Zero and one.

0Ã≤ = Equality.Path.0Ã≤
1Ã≤ = Equality.Path.1Ã≤

-- Reflexivity.

refl·¥æ = Equality.Path.refl

-- Minimum, maximum and negation.

min = Equality.Path.min
max = Equality.Path.max
-_  = Equality.Path.-_

-- The primitive transport operation.

open Equality.Path using (transport)

-- The J rule and transport-refl.

J·¥æ             = Equality.Path.elim
transport-refl = Equality.Path.transport-refl

-- Transitivity (more general than in the paper).

trans·¥æ = Equality.Path.htrans ≥

------------------------------------------------------------------------
-- 4: Heterogeneous Paths

-- Path·¥¥.

Path·¥¥ = Equality.Path.[_]_‚â°_

-- The eliminator elim·¥æ for the propositional truncation operator.

module ‚à•_‚à• where

  elim·¥æ = H-level.Truncation.Propositional.elim·¥æ‚Ä≤

-- Path·¥¥‚â°Path and Path·¥¥‚âÉPath.

Path·¥¥‚â°Path = Equality.Path.heterogeneous‚â°homogeneous
Path·¥¥‚âÉPath = Equality.Path.heterogeneous‚Üîhomogeneous

-- The lemma subst·¥æ.

subst·¥æ = Equality.Path.subst

-- The lemmas subst and subst-refl from the axiomatisation.

subst      = Equality.Equality-with-J.subst
subst-refl = Equality.Equality-with-J.subst-refl

-- The axiomatisation makes it possible to choose the implementations
-- of to-path and from-path.

to-path   = Equality.Path.Equality-with-paths.to-path
from-path = Equality.Path.Equality-with-paths.from-path

-- The code mostly uses a pointwise isomorphism between the arbitrary
-- notion of equality and paths instead of from-path and to-path.

‚â°‚Üî‚â° = Equality.Path.Derived-definitions-and-properties.‚â°‚Üî‚â°

-- The lemmas subst‚â°subst·¥æ, subst‚â°‚âÉPath·¥¥, subst‚â°‚ÜíPath·¥¥ and
-- subst‚â°‚Üísubst·¥æ‚â° (which is formulated as a bijection).

subst‚â°subst·¥æ   = Equality.Path.Isomorphisms.subst‚â°subst
subst‚â°‚âÉPath·¥¥   = Equality.Path.Isomorphisms.subst‚â°‚Üî[]‚â°
subst‚â°‚ÜíPath·¥¥   = Equality.Path.Isomorphisms.subst‚â°‚Üí[]‚â°
subst‚â°‚Üísubst·¥æ‚â° = Equality.Path.Isomorphisms.subst‚â°‚Üîsubst‚â°

-- The lemmas cong·¥∞ and cong·¥∞-refl from the axiomatisation.

cong·¥∞      = Equality.Equality-with-J.dcong
cong·¥∞-refl = Equality.Equality-with-J.dcong-refl

-- The lemmas cong·¥¥ and cong·¥∞·¥æ.

cong·¥¥  = Equality.Path.hcong
cong·¥∞·¥æ = Equality.Path.dcong

-- The proofs cong·¥∞‚â°cong·¥∞·¥æ, cong·¥∞·¥æ‚â°cong·¥¥, cong·¥∞‚â°cong·¥¥ and
-- dependent‚Äêcomputation‚Äêrule‚Äêlemma.

cong·¥∞‚â°cong·¥∞·¥æ = Equality.Path.Isomorphisms.dcong‚â°dcong
cong·¥∞·¥æ‚â°cong·¥¥ = Equality.Path.dcong‚â°hcong
cong·¥∞‚â°cong·¥¥ = Equality.Path.Isomorphisms.dcong‚â°hcong
dependent‚Äêcomputation‚Äêrule‚Äêlemma =
  Equality.Path.Isomorphisms.dcong-subst‚â°‚Üí[]‚â°

------------------------------------------------------------------------
-- 5: The Circle Without Paths

-- The circle and loop.

ùïä¬π   = Circle.ùïä¬π
loop = Circle.loop

-- The lemmas cong and cong-refl from the axiomatisation.

cong      = Equality.Equality-with-J.cong
cong-refl = Equality.Equality-with-J.cong-refl

-- The lemma non-dependent-computation-rule-lemma.

non-dependent-computation-rule-lemma =
  Equality.Path.Isomorphisms.cong-‚â°‚Üî‚â°

-- The lemma trans, which is actually a part of the axiomatisation
-- that I use, but which can be proved using the J rule.

trans    = Equality.Equivalence-relation‚Å∫.trans
J‚ÇÄ‚áítrans = Equality.J‚ÇÄ‚áíEquivalence-relation‚Å∫

-- The lemma subst-const.

subst-const = Equality.Derived-definitions-and-properties.subst-const

-- The lemma cong·¥∞‚â°‚Üícong‚â°.

cong·¥∞‚â°‚Üícong‚â° = Equality.Derived-definitions-and-properties.dcong‚â°‚Üícong‚â°

-- Eliminators and computation rules.

module ùïä¬π where

  elim·¥æ     = Circle.elim·¥æ
  rec·¥æ      = Circle.rec·¥æ
  elim      = Circle.elim
  elim-loop = Circle.elim-loop
  rec       = Circle.rec
  rec-loop  = Circle.rec-loop
  rec‚Ä≤      = Circle.rec‚Ä≤
  rec‚Ä≤-loop = Circle.rec‚Ä≤-loop

------------------------------------------------------------------------
-- 6: Set Quotients Without Paths

-- The definition of h-levels.

Contractible   = Equality.Derived-definitions-and-properties.Contractible
H-level        = H-level.H-level
Is-proposition = Equality.Derived-definitions-and-properties.Is-proposition
Is-set         = Equality.Derived-definitions-and-properties.Is-set

-- Set quotients.

_/_ = Quotient._/_

-- Some lemmas.

H-level·¥æ-suc‚âÉH-level·¥æ-Path·¥¥ = Equality.Path.H-level-suc‚ÜîH-level[]‚â°
index-irrelevant            = Equality.Path.index-irrelevant
transport-transport         = Equality.Path.transport‚àòtransport
heterogeneous-irrelevance   = Equality.Path.heterogeneous-irrelevance
heterogeneous-UIP           = Equality.Path.heterogeneous-UIP
H-level‚âÉH-level·¥æ            = Equality.Path.Isomorphisms.H-level‚ÜîH-level

-- A generalisation of Œ†-cong. Note that equality is provably
-- extensional in Cubical Agda.

Œ†-cong         = Function-universe.Œ†-cong
extensionality = Equality.Path.ext

-- Variants of the constructors.

[]-respects-relation = Quotient.[]-respects-relation
/-is-set             = Quotient./-is-set

-- Eliminators.

module _/_ where

  elim·¥æ‚Ä≤ = Quotient.elim·¥æ‚Ä≤
  elim·¥æ  = Quotient.elim·¥æ
  rec·¥æ   = Quotient.rec·¥æ
  elim   = Quotient.elim
  rec    = Quotient.rec

------------------------------------------------------------------------
-- 7: More Examples

-- Suspensions.

module Susp where

  Susp          = Suspension.Susp
  elim·¥æ         = Suspension.elim·¥æ
  rec·¥æ          = Suspension.rec·¥æ
  meridian      = Suspension.meridian
  elim          = Suspension.elim
  elim-meridian = Suspension.elim-meridian
  rec           = Suspension.rec
  rec-meridian  = Suspension.rec-meridian

-- The propositional truncation operator.

module Propositional-truncation where

  elim·¥æ‚Ä≤  = H-level.Truncation.Propositional.elim·¥æ‚Ä≤
  elim·¥æ   = H-level.Truncation.Propositional.elim·¥æ
  rec·¥æ    = H-level.Truncation.Propositional.rec·¥æ
  trivial = H-level.Truncation.Propositional.truncation-is-proposition
  elim    = H-level.Truncation.Propositional.elim
  rec     = H-level.Truncation.Propositional.rec

------------------------------------------------------------------------
-- 8: An Alternative Approach

-- Circle and Circle·¥æ, combined into a single definition.

Circle = Circle.Circle

-- Circle·¥æ‚âÉCircle, circle·¥æ and circle.

Circle·¥æ‚âÉCircle = Circle.Circle‚âÉCircle
circle·¥æ        = Circle.circle·¥æ
circle         = Circle.circle

-- The computation rule for the higher constructor.

elim-loop-circle = Circle.elim-loop-circle

-- Alternative definitions of Circle·¥æ‚âÉCircle and circle that (at the
-- time of writing) do not give the "correct" computational behaviour
-- for the point constructor.

Circle·¥æ‚âÉCircle‚Ä≤ = Circle.Circle‚âÉCircle‚Ä≤
circle‚Ä≤         = Circle.circle‚Ä≤

------------------------------------------------------------------------
-- 9: Discussion

-- The interval.

import Interval

-- Pushouts.

import Pushout

-- A general truncation operator.

import H-level.Truncation

-- The torus.

import Torus
