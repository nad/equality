------------------------------------------------------------------------
-- The figure of eight
------------------------------------------------------------------------

{-# OPTIONS --erased-cubical --safe #-}

-- The module is parametrised by a notion of equality. The higher
-- constructor of the HIT defining the circle uses path equality, but
-- the supplied notion of equality is used for many other things.

import Equality.Path as P

module Figure-of-eight
  {e‚Å∫} (eq : ‚àÄ {a p} ‚Üí P.Equality-with-paths a p e‚Å∫) where

open P.Derived-definitions-and-properties eq hiding (elim)

import Equality.Path.Univalence as EPU
open import Prelude

open import Bijection equality-with-J using (_‚Üî_)
import Bijection P.equality-with-J as PB
open import Circle eq as Circle using (ùïä¬π; base; loop·¥æ)
open import Equality.Decision-procedures equality-with-J
open import Equality.Path.Isomorphisms eq
import Equality.Tactic P.equality-with-J as PT
open import Equivalence equality-with-J as Eq using (_‚âÉ_)
import Equivalence P.equality-with-J as PE
open import Erased.Cubical eq
open import Function-universe equality-with-J hiding (_‚àò_)
open import Pushout eq as Pushout using (Wedge; inl; inr; glue·¥æ)
import Univalence-axiom P.equality-with-J as PU

private
  variable
    a p   : Level
    A     : Type a
    P     : A ‚Üí Type p
    e r x : A

------------------------------------------------------------------------
-- The type

-- The figure of eight
-- (https://topospaces.subwiki.org/wiki/Wedge_of_two_circles).

data ‚àû : Type where
  base          : ‚àû
  loop‚ÇÅ·¥æ loop‚ÇÇ·¥æ : base P.‚â° base

-- The higher constructors.

loop‚ÇÅ : base ‚â° base
loop‚ÇÅ = _‚Üî_.from ‚â°‚Üî‚â° loop‚ÇÅ·¥æ

loop‚ÇÇ : base ‚â° base
loop‚ÇÇ = _‚Üî_.from ‚â°‚Üî‚â° loop‚ÇÇ·¥æ

------------------------------------------------------------------------
-- Eliminators

-- An eliminator, expressed using paths.

record Elim·¥æ (P : ‚àû ‚Üí Type p) : Type p where
  no-eta-equality
  field
    base ≥  : P base
    loop‚ÇÅ ≥ : P.[ (Œª i ‚Üí P (loop‚ÇÅ·¥æ i)) ] base ≥ ‚â° base ≥
    loop‚ÇÇ ≥ : P.[ (Œª i ‚Üí P (loop‚ÇÇ·¥æ i)) ] base ≥ ‚â° base ≥

open Elim·¥æ public

elim·¥æ : Elim·¥æ P ‚Üí (x : ‚àû) ‚Üí P x
elim·¥æ {P} e = helper
  where
  module E = Elim·¥æ e

  helper : (x : ‚àû) ‚Üí P x
  helper base       = E.base ≥
  helper (loop‚ÇÅ·¥æ i) = E.loop‚ÇÅ ≥ i
  helper (loop‚ÇÇ·¥æ i) = E.loop‚ÇÇ ≥ i

-- A non-dependent eliminator, expressed using paths.

record Rec·¥æ (A : Type a) : Type a where
  no-eta-equality
  field
    base ≥         : A
    loop‚ÇÅ ≥ loop‚ÇÇ ≥ : base ≥ P.‚â° base ≥

open Rec·¥æ public

rec·¥æ : Rec·¥æ A ‚Üí ‚àû ‚Üí A
rec·¥æ r = elim·¥æ Œª where
    .base ≥  ‚Üí R.base ≥
    .loop‚ÇÅ ≥ ‚Üí R.loop‚ÇÅ ≥
    .loop‚ÇÇ ≥ ‚Üí R.loop‚ÇÇ ≥
  where
  module R = Rec·¥æ r

-- An eliminator.

record Elim (P : ‚àû ‚Üí Type p) : Type p where
  no-eta-equality
  field
    base ≥  : P base
    loop‚ÇÅ ≥ : subst P loop‚ÇÅ base ≥ ‚â° base ≥
    loop‚ÇÇ ≥ : subst P loop‚ÇÇ base ≥ ‚â° base ≥

open Elim public

elim : Elim P ‚Üí (x : ‚àû) ‚Üí P x
elim e = elim·¥æ Œª where
    .base ≥  ‚Üí E.base ≥
    .loop‚ÇÅ ≥ ‚Üí subst‚â°‚Üí[]‚â° E.loop‚ÇÅ ≥
    .loop‚ÇÇ ≥ ‚Üí subst‚â°‚Üí[]‚â° E.loop‚ÇÇ ≥
  where
  module E = Elim e

-- Two "computation" rules.

elim-loop‚ÇÅ : dcong (elim e) loop‚ÇÅ ‚â° e .Elim.loop‚ÇÅ ≥
elim-loop‚ÇÅ = dcong-subst‚â°‚Üí[]‚â° (refl _)

elim-loop‚ÇÇ : dcong (elim e) loop‚ÇÇ ‚â° e .Elim.loop‚ÇÇ ≥
elim-loop‚ÇÇ = dcong-subst‚â°‚Üí[]‚â° (refl _)

-- A non-dependent eliminator.

record Rec (A : Type a) : Type a where
  no-eta-equality
  field
    base ≥         : A
    loop‚ÇÅ ≥ loop‚ÇÇ ≥ : base ≥ ‚â° base ≥

open Rec public

rec : Rec A ‚Üí ‚àû ‚Üí A
rec r = rec·¥æ Œª where
    .base ≥  ‚Üí R.base ≥
    .loop‚ÇÅ ≥ ‚Üí _‚Üî_.to ‚â°‚Üî‚â° R.loop‚ÇÅ ≥
    .loop‚ÇÇ ≥ ‚Üí _‚Üî_.to ‚â°‚Üî‚â° R.loop‚ÇÇ ≥
  where
  module R = Rec r

-- Two "computation" rules.

rec-loop‚ÇÅ : cong (rec r) loop‚ÇÅ ‚â° r .Rec.loop‚ÇÅ ≥
rec-loop‚ÇÅ = cong-‚â°‚Üî‚â° (refl _)

rec-loop‚ÇÇ : cong (rec r) loop‚ÇÇ ‚â° r .Rec.loop‚ÇÇ ≥
rec-loop‚ÇÇ = cong-‚â°‚Üî‚â° (refl _)

------------------------------------------------------------------------
-- Some negative results

-- The two higher constructors are not equal.
--
-- The proof is based on the one from the HoTT book that shows that
-- the circle's higher constructor is not equal to reflexivity.

loop‚ÇÅ‚â¢loop‚ÇÇ : loop‚ÇÅ ‚â¢ loop‚ÇÇ
loop‚ÇÅ‚â¢loop‚ÇÇ =
  Stable-¬¨
    [ loop‚ÇÅ ‚â° loop‚ÇÇ      ‚Üî‚ü® Eq.‚âÉ-‚â° (Eq.‚Üî‚áí‚âÉ (inverse ‚â°‚Üî‚â°)) ‚ü©
      loop‚ÇÅ·¥æ ‚â° loop‚ÇÇ·¥æ    ‚Üî‚ü® ‚â°‚Üî‚â° ‚ü©
      loop‚ÇÅ·¥æ P.‚â° loop‚ÇÇ·¥æ  ‚Üù‚ü® PU.¬¨-Type-set EPU.univ ‚àò Type-set ‚ü©‚ñ°
      ‚ä•                  ‚ñ°
    ]
  where
  module _ (hyp : loop‚ÇÅ·¥æ P.‚â° loop‚ÇÇ·¥æ) where
    refl‚â° : (A : Type) (A‚â°A : A P.‚â° A) ‚Üí P.refl P.‚â° A‚â°A
    refl‚â° A A‚â°A =
      P.refl           P.‚â°‚ü®‚ü©
      P.cong F loop‚ÇÅ·¥æ  P.‚â°‚ü® P.cong (P.cong F) hyp ‚ü©
      P.cong F loop‚ÇÇ·¥æ  P.‚â°‚ü®‚ü©
      A‚â°A              P.‚àé
      where
      F : ‚àû ‚Üí Type
      F base       = A
      F (loop‚ÇÅ·¥æ i) = P.refl i
      F (loop‚ÇÇ·¥æ i) = A‚â°A i

    Type-set : P.Is-set Type
    Type-set {x = A} {y = B} =
      P.elim¬π (Œª p ‚Üí ‚àÄ q ‚Üí p P.‚â° q)
              (refl‚â° A)

-- The two higher constructors provide a counterexample to
-- commutativity of transitivity.
--
-- This proof is a minor variant of a proof due to Andrea Vezzosi.

trans-not-commutative : trans loop‚ÇÅ loop‚ÇÇ ‚â¢ trans loop‚ÇÇ loop‚ÇÅ
trans-not-commutative =
  Stable-¬¨
    [ trans loop‚ÇÅ loop‚ÇÇ ‚â° trans loop‚ÇÇ loop‚ÇÅ          ‚Üù‚ü® (Œª hyp ‚Üí trans (sym (_‚Üî_.from-to ‚â°‚Üî‚â° (sym trans‚â°trans)))
                                                                   (trans (cong (_‚Üî_.to ‚â°‚Üî‚â°) hyp) (_‚Üî_.from-to ‚â°‚Üî‚â° (sym trans‚â°trans)))) ‚ü©

      P.trans loop‚ÇÅ·¥æ loop‚ÇÇ·¥æ ‚â° P.trans loop‚ÇÇ·¥æ loop‚ÇÅ·¥æ  ‚Üù‚ü® cong (P.subst F) ‚ü©

      P.subst F (P.trans loop‚ÇÅ·¥æ loop‚ÇÇ·¥æ) ‚â°
      P.subst F (P.trans loop‚ÇÇ·¥æ loop‚ÇÅ·¥æ)              ‚Üù‚ü® (Œª hyp ‚Üí trans (sym (_‚Üî_.from ‚â°‚Üî‚â° lemma‚ÇÅ‚ÇÇ))
                                                                   (trans hyp (_‚Üî_.from ‚â°‚Üî‚â° lemma‚ÇÇ‚ÇÅ))) ‚ü©
      PE._‚âÉ_.to eq‚ÇÇ ‚àò PE._‚âÉ_.to eq‚ÇÅ ‚â°
      PE._‚âÉ_.to eq‚ÇÅ ‚àò PE._‚âÉ_.to eq‚ÇÇ                  ‚Üù‚ü® cong (_$ fzero) ‚ü©

      fzero ‚â° fsuc fzero                             ‚Üù‚ü® ‚äé.inj‚ÇÅ‚â¢inj‚ÇÇ ‚ü©‚ñ°

      ‚ä•                                              ‚ñ°
    ]
  where
  eq‚ÇÅ : Fin 3 PE.‚âÉ Fin 3
  eq‚ÇÅ = PE.‚Üî‚áí‚âÉ (record
    { surjection = record
      { logical-equivalence = record
        { to   = Œª where
                   fzero               ‚Üí fsuc (fsuc fzero)
                   (fsuc fzero)        ‚Üí fsuc fzero
                   (fsuc (fsuc fzero)) ‚Üí fzero
        ; from = Œª where
                   fzero               ‚Üí fsuc (fsuc fzero)
                   (fsuc fzero)        ‚Üí fsuc fzero
                   (fsuc (fsuc fzero)) ‚Üí fzero
        }
      ; right-inverse-of = Œª where
          fzero               ‚Üí P.refl
          (fsuc fzero)        ‚Üí P.refl
          (fsuc (fsuc fzero)) ‚Üí P.refl
      }
    ; left-inverse-of = Œª where
        fzero               ‚Üí P.refl
        (fsuc fzero)        ‚Üí P.refl
        (fsuc (fsuc fzero)) ‚Üí P.refl
    })

  eq‚ÇÇ : Fin 3 PE.‚âÉ Fin 3
  eq‚ÇÇ = PE.‚Üî‚áí‚âÉ (record
    { surjection = record
      { logical-equivalence = record
        { to   = Œª where
                   fzero               ‚Üí fsuc fzero
                   (fsuc fzero)        ‚Üí fsuc (fsuc fzero)
                   (fsuc (fsuc fzero)) ‚Üí fzero
        ; from = Œª where
                   fzero               ‚Üí fsuc (fsuc fzero)
                   (fsuc fzero)        ‚Üí fzero
                   (fsuc (fsuc fzero)) ‚Üí fsuc fzero
        }
      ; right-inverse-of = Œª where
          fzero               ‚Üí P.refl
          (fsuc fzero)        ‚Üí P.refl
          (fsuc (fsuc fzero)) ‚Üí P.refl
      }
    ; left-inverse-of = Œª where
        fzero               ‚Üí P.refl
        (fsuc fzero)        ‚Üí P.refl
        (fsuc (fsuc fzero)) ‚Üí P.refl
    })

  @0 F : ‚àû ‚Üí Type
  F base       = Fin 3
  F (loop‚ÇÅ·¥æ i) = EPU.‚âÉ‚áí‚â° eq‚ÇÅ i
  F (loop‚ÇÇ·¥æ i) = EPU.‚âÉ‚áí‚â° eq‚ÇÇ i

  lemma‚ÇÅ‚ÇÇ :
    P.subst F (P.trans loop‚ÇÅ·¥æ loop‚ÇÇ·¥æ) P.‚â°
    PE._‚âÉ_.to eq‚ÇÇ ‚àò PE._‚âÉ_.to eq‚ÇÅ
  lemma‚ÇÅ‚ÇÇ _ i@fzero               = PE._‚âÉ_.to eq‚ÇÇ (PE._‚âÉ_.to eq‚ÇÅ i)
  lemma‚ÇÅ‚ÇÇ _ i@(fsuc fzero)        = PE._‚âÉ_.to eq‚ÇÇ (PE._‚âÉ_.to eq‚ÇÅ i)
  lemma‚ÇÅ‚ÇÇ _ i@(fsuc (fsuc fzero)) = PE._‚âÉ_.to eq‚ÇÇ (PE._‚âÉ_.to eq‚ÇÅ i)

  lemma‚ÇÇ‚ÇÅ :
    P.subst F (P.trans loop‚ÇÇ·¥æ loop‚ÇÅ·¥æ) P.‚â°
    PE._‚âÉ_.to eq‚ÇÅ ‚àò PE._‚âÉ_.to eq‚ÇÇ
  lemma‚ÇÇ‚ÇÅ _ i@fzero               = PE._‚âÉ_.to eq‚ÇÅ (PE._‚âÉ_.to eq‚ÇÇ i)
  lemma‚ÇÇ‚ÇÅ _ i@(fsuc fzero)        = PE._‚âÉ_.to eq‚ÇÅ (PE._‚âÉ_.to eq‚ÇÇ i)
  lemma‚ÇÇ‚ÇÅ _ i@(fsuc (fsuc fzero)) = PE._‚âÉ_.to eq‚ÇÅ (PE._‚âÉ_.to eq‚ÇÇ i)

private

  -- A lemma used below.

  trans-sometimes-commutative‚Ä≤ :
    {p q : x ‚â° x} (f : (x : ‚àû) ‚Üí x ‚â° x) ‚Üí
    f x ‚â° p ‚Üí
    trans p q ‚â° trans q p
  trans-sometimes-commutative‚Ä≤ {x} {p} {q} f f-x‚â°p =
    trans p q      ‚â°‚ü® cong (flip trans _) $ sym f-x‚â°p ‚ü©
    trans (f x) q  ‚â°‚ü® trans-sometimes-commutative f ‚ü©
    trans q (f x)  ‚â°‚ü® cong (trans q) f-x‚â°p ‚ü©‚àé
    trans q p      ‚àé

-- There is no function of type (x¬†:¬†‚àû)¬†‚Üí¬†x¬†‚â°¬†x which returns loop‚ÇÅ
-- when applied to base.

¬¨-base‚Ü¶loop‚ÇÅ : ¬¨ ‚àÉ Œª (f : (x : ‚àû) ‚Üí x ‚â° x) ‚Üí f base ‚â° loop‚ÇÅ
¬¨-base‚Ü¶loop‚ÇÅ (f , f-base‚â°loop‚ÇÅ) =
  trans-not-commutative (
    trans loop‚ÇÅ loop‚ÇÇ  ‚â°‚ü® trans-sometimes-commutative‚Ä≤ f f-base‚â°loop‚ÇÅ ‚ü©‚àé
    trans loop‚ÇÇ loop‚ÇÅ  ‚àé)

-- There is no function of type (x¬†:¬†‚àû)¬†‚Üí¬†x¬†‚â°¬†x which returns loop‚ÇÇ
-- when applied to base.

¬¨-base‚Ü¶loop‚ÇÇ : ¬¨ ‚àÉ Œª (f : (x : ‚àû) ‚Üí x ‚â° x) ‚Üí f base ‚â° loop‚ÇÇ
¬¨-base‚Ü¶loop‚ÇÇ (f , f-base‚â°loop‚ÇÇ) =
  trans-not-commutative (
    trans loop‚ÇÅ loop‚ÇÇ  ‚â°‚ü® sym $ trans-sometimes-commutative‚Ä≤ f f-base‚â°loop‚ÇÇ ‚ü©‚àé
    trans loop‚ÇÇ loop‚ÇÅ  ‚àé)

-- There is no function of type (x¬†:¬†‚àû)¬†‚Üí¬†x¬†‚â°¬†x which returns
-- trans¬†loop‚ÇÅ¬†loop‚ÇÇ when applied to base.

¬¨-base‚Ü¶trans-loop‚ÇÅ-loop‚ÇÇ :
  ¬¨ ‚àÉ Œª (f : (x : ‚àû) ‚Üí x ‚â° x) ‚Üí f base ‚â° trans loop‚ÇÅ loop‚ÇÇ
¬¨-base‚Ü¶trans-loop‚ÇÅ-loop‚ÇÇ (f , f-base‚â°trans-loop‚ÇÅ-loop‚ÇÇ) =
  trans-not-commutative (
    trans loop‚ÇÅ loop‚ÇÇ                                    ‚â°‚ü® sym $ trans-reflÀ° _ ‚ü©
    trans (refl _) (trans loop‚ÇÅ loop‚ÇÇ)                   ‚â°‚ü® cong (flip trans _) $ sym $ trans-symÀ° _ ‚ü©
    trans (trans (sym loop‚ÇÅ) loop‚ÇÅ) (trans loop‚ÇÅ loop‚ÇÇ)  ‚â°‚ü® trans-assoc _ _ _ ‚ü©
    trans (sym loop‚ÇÅ) (trans loop‚ÇÅ (trans loop‚ÇÅ loop‚ÇÇ))  ‚â°‚ü® cong (trans (sym loop‚ÇÅ)) $ sym $
                                                            trans-sometimes-commutative‚Ä≤ f f-base‚â°trans-loop‚ÇÅ-loop‚ÇÇ ‚ü©
    trans (sym loop‚ÇÅ) (trans (trans loop‚ÇÅ loop‚ÇÇ) loop‚ÇÅ)  ‚â°‚ü® cong (trans (sym loop‚ÇÅ)) $ trans-assoc _ _ _ ‚ü©
    trans (sym loop‚ÇÅ) (trans loop‚ÇÅ (trans loop‚ÇÇ loop‚ÇÅ))  ‚â°‚ü® sym $ trans-assoc _ _ _ ‚ü©
    trans (trans (sym loop‚ÇÅ) loop‚ÇÅ) (trans loop‚ÇÇ loop‚ÇÅ)  ‚â°‚ü® cong (flip trans _) $ trans-symÀ° _ ‚ü©
    trans (refl _) (trans loop‚ÇÇ loop‚ÇÅ)                   ‚â°‚ü® trans-reflÀ° _ ‚ü©‚àé
    trans loop‚ÇÇ loop‚ÇÅ                                    ‚àé)

-- There is no function of type (x¬†:¬†‚àû)¬†‚Üí¬†x¬†‚â°¬†x which returns
-- trans¬†loop‚ÇÇ¬†loop‚ÇÅ when applied to base.

¬¨-base‚Ü¶trans-loop‚ÇÇ-loop‚ÇÅ :
  ¬¨ ‚àÉ Œª (f : (x : ‚àû) ‚Üí x ‚â° x) ‚Üí f base ‚â° trans loop‚ÇÇ loop‚ÇÅ
¬¨-base‚Ü¶trans-loop‚ÇÇ-loop‚ÇÅ (f , f-base‚â°trans-loop‚ÇÇ-loop‚ÇÅ) =
  trans-not-commutative (
    trans loop‚ÇÅ loop‚ÇÇ                                    ‚â°‚ü® sym $ trans-reflÀ° _ ‚ü©
    trans (refl _) (trans loop‚ÇÅ loop‚ÇÇ)                   ‚â°‚ü® cong (flip trans _) $ sym $ trans-symÀ° _ ‚ü©
    trans (trans (sym loop‚ÇÇ) loop‚ÇÇ) (trans loop‚ÇÅ loop‚ÇÇ)  ‚â°‚ü® trans-assoc _ _ _ ‚ü©
    trans (sym loop‚ÇÇ) (trans loop‚ÇÇ (trans loop‚ÇÅ loop‚ÇÇ))  ‚â°‚ü® cong (trans (sym loop‚ÇÇ)) $ sym $ trans-assoc _ _ _ ‚ü©
    trans (sym loop‚ÇÇ) (trans (trans loop‚ÇÇ loop‚ÇÅ) loop‚ÇÇ)  ‚â°‚ü® cong (trans (sym loop‚ÇÇ)) $
                                                            trans-sometimes-commutative‚Ä≤ f f-base‚â°trans-loop‚ÇÇ-loop‚ÇÅ ‚ü©
    trans (sym loop‚ÇÇ) (trans loop‚ÇÇ (trans loop‚ÇÇ loop‚ÇÅ))  ‚â°‚ü® sym $ trans-assoc _ _ _ ‚ü©
    trans (trans (sym loop‚ÇÇ) loop‚ÇÇ) (trans loop‚ÇÇ loop‚ÇÅ)  ‚â°‚ü® cong (flip trans _) $ trans-symÀ° _ ‚ü©
    trans (refl _) (trans loop‚ÇÇ loop‚ÇÅ)                   ‚â°‚ü® trans-reflÀ° _ ‚ü©‚àé
    trans loop‚ÇÇ loop‚ÇÅ                                    ‚àé)

-- TODO: Can one prove that functions of type (x¬†:¬†‚àû)¬†‚Üí¬†x¬†‚â°¬†x must map
-- base to refl¬†base?

------------------------------------------------------------------------
-- A positive result

-- The figure of eight can be expressed as a wedge of two circles.
--
-- This result was suggested to me by Anders M√∂rtberg.

‚àû‚âÉWedge-ùïä¬π-ùïä¬π : ‚àû ‚âÉ Wedge (ùïä¬π , base) (ùïä¬π , base)
‚àû‚âÉWedge-ùïä¬π-ùïä¬π = Eq.‚Üî‚áí‚âÉ (record
  { surjection = record
    { logical-equivalence = record
      { to   = to
      ; from = from
      }
    ; right-inverse-of = to‚àòfrom
    }
  ; left-inverse-of = _‚Üî_.from ‚â°‚Üî‚â° ‚àò from‚àòto
  })
  where
  lemma : inl base P.‚â° inl base
  lemma =
    inl base  P.‚â°‚ü® glue·¥æ tt ‚ü©
    inr base  P.‚â°‚ü® P.sym (P.cong inr loop·¥æ) ‚ü©
    inr base  P.‚â°‚ü® P.sym (glue·¥æ tt) ‚ü©‚àé
    inl base  ‚àé

  Glue  = PT.Lift (glue·¥æ tt)
  Loop  = PT.Lift (P.cong inr loop·¥æ)
  Loop‚ÇÇ = PT.Lift loop‚ÇÇ·¥æ
  Lemma =
    PT.Trans Glue $
    PT.Trans (PT.Sym Loop) $
    PT.Sym Glue

  to : ‚àû ‚Üí Wedge (ùïä¬π , base) (ùïä¬π , base)
  to base       = inl base
  to (loop‚ÇÅ·¥æ i) = P.cong inl loop·¥æ i
  to (loop‚ÇÇ·¥æ i) = P.sym lemma i

  from : Wedge (ùïä¬π , base) (ùïä¬π , base) ‚Üí ‚àû
  from = Pushout.rec·¥æ
    (Circle.rec·¥æ base loop‚ÇÅ·¥æ)
    (Circle.rec·¥æ base loop‚ÇÇ·¥æ)
    (Œª _ ‚Üí P.refl)

  to‚àòfrom : ‚àÄ x ‚Üí to (from x) ‚â° x
  to‚àòfrom =
    _‚Üî_.from ‚â°‚Üî‚â° ‚àò
    Pushout.elim·¥æ _
      (Circle.elim·¥æ _ P.refl (Œª _ ‚Üí P.refl))
      (Circle.elim·¥æ _ (glue·¥æ _)
         (PB._‚Üî_.from (P.heterogeneous‚Üîhomogeneous _)
         (P.transport (Œª i ‚Üí P.sym lemma i P.‚â° inr (loop·¥æ i))
            P.0Ã≤ (glue·¥æ tt)                                       P.‚â°‚ü® P.transport-‚â° (glue·¥æ tt) ‚ü©

          P.trans lemma (P.trans (glue·¥æ tt) (P.cong inr loop·¥æ))  P.‚â°‚ü® PT.prove
                                                                        (PT.Trans Lemma (PT.Trans Glue Loop))
                                                                        (PT.Trans Glue (PT.Trans (PT.Sym Loop)
                                                                                          (PT.Trans (PT.Trans (PT.Sym Glue) Glue) Loop)))
                                                                        P.refl ‚ü©
          P.trans (glue·¥æ tt)
            (P.trans (P.sym (P.cong inr loop·¥æ))
               (P.trans (P.trans (P.sym (glue·¥æ tt)) (glue·¥æ tt))
                  (P.cong inr loop·¥æ)))                           P.‚â°‚ü® P.cong (Œª eq ‚Üí P.trans (glue·¥æ tt) (P.trans (P.sym (P.cong inr loop·¥æ))
                                                                                                           (P.trans eq (P.cong inr loop·¥æ)))) $
                                                                      P.trans-symÀ° _ ‚ü©
          P.trans (glue·¥æ tt)
            (P.trans (P.sym (P.cong inr loop·¥æ))
               (P.trans P.refl
                  (P.cong inr loop·¥æ)))                           P.‚â°‚ü® P.cong (Œª eq ‚Üí P.trans (glue·¥æ tt)
                                                                                       (P.trans (P.sym (P.cong inr loop·¥æ)) eq)) $
                                                                      P.trans-reflÀ° _ ‚ü©
          P.trans (glue·¥æ tt)
            (P.trans (P.sym (P.cong inr loop·¥æ))
               (P.cong inr loop·¥æ))                               P.‚â°‚ü® P.cong (P.trans (glue·¥æ tt)) $ P.trans-symÀ° _ ‚ü©

          P.trans (glue·¥æ tt) P.refl                              P.‚â°‚ü® P.trans-refl ≥ _ ‚ü©‚àé


          glue·¥æ tt                                               ‚àé)))
      (Œª _ ‚Üí PB._‚Üî_.from (P.heterogeneous‚Üîhomogeneous _) (
         P.subst (inl base P.‚â°_) (glue·¥æ tt) P.refl  P.‚â°‚ü® P.sym $ P.trans-subst {x‚â°y = P.refl} ‚ü©
         P.trans P.refl (glue·¥æ tt)                  P.‚â°‚ü® P.trans-reflÀ° _ ‚ü©‚àé
         glue·¥æ tt                                   ‚àé))

  from‚àòto : ‚àÄ x ‚Üí from (to x) P.‚â° x
  from‚àòto base       = P.refl
  from‚àòto (loop‚ÇÅ·¥æ i) = P.refl
  from‚àòto (loop‚ÇÇ·¥æ i) = lemma‚Ä≤ i
    where
    lemma‚Ä≤ : P.[ (Œª i ‚Üí P.cong from (P.sym lemma) i P.‚â° loop‚ÇÇ·¥æ i) ]
               P.refl ‚â° P.refl
    lemma‚Ä≤ = PB._‚Üî_.from (P.heterogeneous‚Üîhomogeneous _) (
      P.transport (Œª i ‚Üí P.cong from (P.sym lemma) i P.‚â° loop‚ÇÇ·¥æ i)
        P.0Ã≤ P.refl                                                     P.‚â°‚ü® P.transport-‚â° P.refl ‚ü©

      P.trans (P.cong from lemma) (P.trans P.refl loop‚ÇÇ·¥æ)              P.‚â°‚ü® PT.prove
                                                                              (PT.Trans (PT.Cong from Lemma) (PT.Trans PT.Refl Loop‚ÇÇ))
                                                                              (PT.Trans (PT.Trans (PT.Cong from Glue)
                                                                                           (PT.Trans (PT.Cong from (PT.Sym Loop))
                                                                                              (PT.Cong from (PT.Sym Glue))))
                                                                                 Loop‚ÇÇ)
                                                                              P.refl ‚ü©
      P.trans (P.trans (P.cong from (glue·¥æ tt))
                 (P.trans (P.cong from (P.sym (P.cong inr loop·¥æ)))
                    (P.cong from (P.sym (glue·¥æ tt)))))
        loop‚ÇÇ·¥æ                                                         P.‚â°‚ü®‚ü©

      P.trans (P.trans P.refl (P.trans (P.sym loop‚ÇÇ·¥æ) P.refl)) loop‚ÇÇ·¥æ  P.‚â°‚ü® P.cong (flip P.trans loop‚ÇÇ·¥æ) $
                                                                            P.trans-reflÀ° (P.trans (P.sym loop‚ÇÇ·¥æ) P.refl) ‚ü©

      P.trans (P.trans (P.sym loop‚ÇÇ·¥æ) P.refl) loop‚ÇÇ·¥æ                   P.‚â°‚ü® P.cong (flip P.trans loop‚ÇÇ·¥æ) $
                                                                            P.trans-refl ≥ (P.sym loop‚ÇÇ·¥æ) ‚ü©

      P.trans (P.sym loop‚ÇÇ·¥æ) loop‚ÇÇ·¥æ                                    P.‚â°‚ü® P.trans-symÀ° _ ‚ü©‚àé

      P.refl                                                           ‚àé)
